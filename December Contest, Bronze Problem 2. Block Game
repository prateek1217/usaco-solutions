In this problem, we have several pairs of words. We want to count the maximum number of times a letter will appear when we write out a word from each pair, no matter which word we pick from each pair.

We can start to tackle this problem by handling the case where there is exactly one pair of words to consider. When there is exactly one pair of words to consider, the maximum number of times the letter 'a' will appear is the maximum of the number of times the letter 'a' appears in the first word and the number of times the letter 'a' appears in the second word. We can replace 'a' with any letter and that will get us the maximum number of times any given letter will appear.

Now that we've handled the case where there is exactly one pair of words to consider, we need to figure out how to extend this to multiple pairs. Intuitively, the situation where we'll need to write 'a' the maximum possible number of times in total is when we need to write 'a' the maximum possible number of times for each individual pair. What we can do therefore is compute the maximum frequency count for a given letter in a pair and then add up the maximum frequency counts over all pairs.




#include <bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
#define endl '\n'
#define popcount __builtin_popcount
#define poplenl   __builtin_clzl
#define poplen   __builtin_clz
#define sz(x) (int)x.size()
#define all(x) x.begin(),x.end()
#define rep(i,x,y) for (int i=x;i<y;i++)
#define lenght length
void DBG() {
	cerr << "]" << endl;
}
template<class H, class... T> void DBG(H h, T... t) {
	cerr << h;
	if(sizeof...(t))
		cerr << ", ";
	DBG(t...);
}
#ifndef ONLINE_JUDGE
#define debug(...) cerr << "LINE(" << __LINE__ << ") -> [" << #__VA_ARGS__ << "]: [", DBG(__VA_ARGS__)
#else 
#define debug(...)
#endif
template <typename T>
void debugv(vector <T> &v){ for(int i=0;i<v.size();i++)cerr<<v[i]<<" ";cerr<<endl; }
template <typename T>
void debugvv(vector <vector <T>>&v){
	for(int i=0;i<v.size();i++){
		cerr<<i<<" ==> " ;
		for(int j=0;j<v[i].size();j++)
		cerr<<v[i][j]<<" ";
		cerr<<endl;
	}
}
template <typename T>
void debugs(set <T> &s){cerr<<"size "<<s.size()<<endl; for (auto item : s) cerr<<item<<" "; cerr<<endl;}
typedef long long ll;
ll mod=1e9+7;
ll binpow(ll b, ll e){
	ll ans = 1;
	while (e !=0){
		if (e&1) ans=(ans%mod*b%mod);
		e=e>>1;
		b  = (b*b)%mod;
	}
	return ans;
}
long long inv(long long  a, long long  mod) {
     long long  g = mod, x = 0, y = 1;
     while(a != 0) {
          long long  q = g / a;
          g %= a; swap(g, a);
          x -= q * y; swap(x, y);
     } return x < 0? x + mod : x;
}

void io(string n) {
	freopen((n+".in").c_str() , "r" , stdin );
	freopen((n+".out").c_str() , "w" , stdout );
}

int main(){
     #ifdef ONLINE_JUDGE
     ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
     #endif
     io("blocks");
     int n;
     cin>>n;
     map<char,int>m1,m2,m3;
for(int i=1;i<=26;i++)
{
     m1['a'+i-1]=0;
     m2['a'+i-1]=0;
     m3['a'+i-1]=0;
}
for(int i=0;i<n;i++)
{
     int ans=0;
     string s1,s2;
     cin>>s1>>s2;
for(int j=0;j<s1.size();j++)
{
     m1[s1[j]]++;
}
for(int j=0;j<s2.size();j++)
{
     m2[s2[j]]++;
}
for(auto j:m1)
{
     m3[j.first]+=max(m1[j.first],m2[j.first]);
     m1[j.first]=0;
     m2[j.first]=0;
}
for(auto j:m2)
{
m3[j.first]+=max(m1[j.first],m2[j.first]);
m1[j.first]=0;
m2[j.first]=0;
}

}


for(auto i:m3)
cout<<i.second<<endl;

	
}
